/**
 * Firebase Cloud Function Template
 * Generated by Claude Code for Firebase Development Toolkit
 * 
 * @param {Object} data - Function parameters
 * @param {Object} context - Firebase function context
 * @returns {Promise<Object>} Function result
 */
const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Initialize Firebase Admin if not already done
if (!admin.apps.length) {
  admin.initializeApp();
}

exports.templateFunction = functions.https.onCall(async (data, context) => {
  try {
    // Validate authentication
    if (!context.auth) {
      throw new functions.https.HttpsError(
        'unauthenticated',
        'User must be authenticated to call this function.'
      );
    }

    // Validate input data
    if (!data || typeof data !== 'object') {
      throw new functions.https.HttpsError(
        'invalid-argument',
        'Invalid input data provided.'
      );
    }

    // Main function logic here
    const result = await processRequest(data, context.auth.uid);

    // Return success response
    return {
      success: true,
      data: result,
      timestamp: admin.firestore.FieldValue.serverTimestamp()
    };

  } catch (error) {
    console.error('Function error:', error);
    
    // Re-throw Firebase errors
    if (error instanceof functions.https.HttpsError) {
      throw error;
    }
    
    // Convert other errors to Firebase errors
    throw new functions.https.HttpsError(
      'internal',
      'An internal error occurred.'
    );
  }
});

/**
 * Process the main request logic
 * @param {Object} data - Request data
 * @param {string} uid - User ID
 * @returns {Promise<Object>} Processed result
 */
async function processRequest(data, uid) {
  // Implementation specific to your use case
  // This is where Claude Code will generate the actual logic
  
  return {
    message: 'Function executed successfully',
    userId: uid,
    processedData: data
  };
}